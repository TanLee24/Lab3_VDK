
Lab3_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002c78  08002c78  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c78  08002c78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000074  08002cf4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08002cf4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009654  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b86  00000000  00000000  000296f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f7d  00000000  00000000  0002c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c75f  00000000  00000000  00043515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082483  00000000  00000000  0004fc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d20f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002798  00000000  00000000  000d214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c3c 	.word	0x08002c3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002c3c 	.word	0x08002c3c

0800014c <isButtonPressed>:

GPIO_TypeDef* buttonPort[NUM_OF_BUTTONS] = {Button1_GPIO_Port, Button2_GPIO_Port, Button3_GPIO_Port};
uint16_t buttonPin[NUM_OF_BUTTONS] = {Button1_Pin, Button2_Pin, Button3_Pin};

int isButtonPressed(int index)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (buttonFlag[index] == 1)
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
	{
		buttonFlag[index] = 0;   // reset cờ sau khi đọc
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;                  // trả về “vừa nhấn”
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <readButton>:

void readButton()
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTONS; i++)
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e07a      	b.n	8000282 <readButton+0x102>
    {
        KeyReg0[i] = KeyReg1[i];
 800018c:	4a41      	ldr	r2, [pc, #260]	; (8000294 <readButton+0x114>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4940      	ldr	r1, [pc, #256]	; (8000298 <readButton+0x118>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 800019c:	4a3f      	ldr	r2, [pc, #252]	; (800029c <readButton+0x11c>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493b      	ldr	r1, [pc, #236]	; (8000294 <readButton+0x114>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg2[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80001ac:	4a3c      	ldr	r2, [pc, #240]	; (80002a0 <readButton+0x120>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493b      	ldr	r1, [pc, #236]	; (80002a4 <readButton+0x124>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001bc:	4619      	mov	r1, r3
 80001be:	4610      	mov	r0, r2
 80001c0:	f001 fd10 	bl	8001be4 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4619      	mov	r1, r3
 80001c8:	4a34      	ldr	r2, [pc, #208]	; (800029c <readButton+0x11c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i])
 80001d0:	4a31      	ldr	r2, [pc, #196]	; (8000298 <readButton+0x118>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	492e      	ldr	r1, [pc, #184]	; (8000294 <readButton+0x114>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d14b      	bne.n	800027c <readButton+0xfc>
 80001e4:	4a2b      	ldr	r2, [pc, #172]	; (8000294 <readButton+0x114>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	492b      	ldr	r1, [pc, #172]	; (800029c <readButton+0x11c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d141      	bne.n	800027c <readButton+0xfc>
        {
        	if (KeyReg3[i] != KeyReg2[i])
 80001f8:	4a2b      	ldr	r2, [pc, #172]	; (80002a8 <readButton+0x128>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4926      	ldr	r1, [pc, #152]	; (800029c <readButton+0x11c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	429a      	cmp	r2, r3
 800020a:	d018      	beq.n	800023e <readButton+0xbe>
        	{
        		KeyReg3[i] = KeyReg2[i];
 800020c:	4a23      	ldr	r2, [pc, #140]	; (800029c <readButton+0x11c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4924      	ldr	r1, [pc, #144]	; (80002a8 <readButton+0x128>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        		if (KeyReg2[i] == PRESSED_STATE)
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <readButton+0x11c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d129      	bne.n	800027c <readButton+0xfc>
        		{
        			buttonFlag[i] = 1;
 8000228:	4a20      	ldr	r2, [pc, #128]	; (80002ac <readButton+0x12c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2101      	movs	r1, #1
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        			Timer_For_Key_Press[i] = 200;
 8000232:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <readButton+0x130>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	21c8      	movs	r1, #200	; 0xc8
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023c:	e01e      	b.n	800027c <readButton+0xfc>
        		}
        	}
        	else
        	{
        		if (KeyReg2[i] == PRESSED_STATE)
 800023e:	4a17      	ldr	r2, [pc, #92]	; (800029c <readButton+0x11c>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d118      	bne.n	800027c <readButton+0xfc>
        		{
        			Timer_For_Key_Press[i]--;
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <readButton+0x130>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	1e5a      	subs	r2, r3, #1
 8000254:	4916      	ldr	r1, [pc, #88]	; (80002b0 <readButton+0x130>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        			if (Timer_For_Key_Press[i] == 0)
 800025c:	4a14      	ldr	r2, [pc, #80]	; (80002b0 <readButton+0x130>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d109      	bne.n	800027c <readButton+0xfc>
        			{
        				buttonFlag[i] = 1;
 8000268:	4a10      	ldr	r2, [pc, #64]	; (80002ac <readButton+0x12c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2101      	movs	r1, #1
 800026e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        				Timer_For_Key_Press[i] = 200;
 8000272:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <readButton+0x130>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	21c8      	movs	r1, #200	; 0xc8
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_OF_BUTTONS; i++)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b02      	cmp	r3, #2
 8000286:	dd81      	ble.n	800018c <readButton+0xc>
        			}
        		}
        	}
        }
    }
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000018 	.word	0x20000018
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000024 	.word	0x20000024
 80002a0:	2000003c 	.word	0x2000003c
 80002a4:	20000048 	.word	0x20000048
 80002a8:	20000030 	.word	0x20000030
 80002ac:	20000090 	.word	0x20000090
 80002b0:	20000000 	.word	0x20000000

080002b4 <display7SEG1>:
#include "global.h"

int enable7SEG = EN0;

void display7SEG1(int num)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b09      	cmp	r3, #9
 80002c0:	f200 8180 	bhi.w	80005c4 <display7SEG1+0x310>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <display7SEG1+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002f5 	.word	0x080002f5
 80002d0:	0800033d 	.word	0x0800033d
 80002d4:	08000385 	.word	0x08000385
 80002d8:	080003cd 	.word	0x080003cd
 80002dc:	08000415 	.word	0x08000415
 80002e0:	0800045d 	.word	0x0800045d
 80002e4:	080004a5 	.word	0x080004a5
 80002e8:	080004ed 	.word	0x080004ed
 80002ec:	08000535 	.word	0x08000535
 80002f0:	0800057d 	.word	0x0800057d
    switch (num)
    {
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	48b5      	ldr	r0, [pc, #724]	; (80005d0 <display7SEG1+0x31c>)
 80002fa:	f001 fc8a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 80002fe:	2200      	movs	r2, #0
 8000300:	2102      	movs	r1, #2
 8000302:	48b3      	ldr	r0, [pc, #716]	; (80005d0 <display7SEG1+0x31c>)
 8000304:	f001 fc85 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	48b0      	ldr	r0, [pc, #704]	; (80005d0 <display7SEG1+0x31c>)
 800030e:	f001 fc80 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // d on
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	48ae      	ldr	r0, [pc, #696]	; (80005d0 <display7SEG1+0x31c>)
 8000318:	f001 fc7b 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // e on
 800031c:	2200      	movs	r2, #0
 800031e:	2110      	movs	r1, #16
 8000320:	48ab      	ldr	r0, [pc, #684]	; (80005d0 <display7SEG1+0x31c>)
 8000322:	f001 fc76 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // f on
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	48a9      	ldr	r0, [pc, #676]	; (80005d0 <display7SEG1+0x31c>)
 800032c:	f001 fc71 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);   // g off
 8000330:	2201      	movs	r2, #1
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	48a6      	ldr	r0, [pc, #664]	; (80005d0 <display7SEG1+0x31c>)
 8000336:	f001 fc6c 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 800033a:	e144      	b.n	80005c6 <display7SEG1+0x312>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);   // a off
 800033c:	2201      	movs	r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	48a3      	ldr	r0, [pc, #652]	; (80005d0 <display7SEG1+0x31c>)
 8000342:	f001 fc66 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 8000346:	2200      	movs	r2, #0
 8000348:	2102      	movs	r1, #2
 800034a:	48a1      	ldr	r0, [pc, #644]	; (80005d0 <display7SEG1+0x31c>)
 800034c:	f001 fc61 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	489e      	ldr	r0, [pc, #632]	; (80005d0 <display7SEG1+0x31c>)
 8000356:	f001 fc5c 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);   // d off
 800035a:	2201      	movs	r2, #1
 800035c:	2108      	movs	r1, #8
 800035e:	489c      	ldr	r0, [pc, #624]	; (80005d0 <display7SEG1+0x31c>)
 8000360:	f001 fc57 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);   // e off
 8000364:	2201      	movs	r2, #1
 8000366:	2110      	movs	r1, #16
 8000368:	4899      	ldr	r0, [pc, #612]	; (80005d0 <display7SEG1+0x31c>)
 800036a:	f001 fc52 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);   // f off
 800036e:	2201      	movs	r2, #1
 8000370:	2120      	movs	r1, #32
 8000372:	4897      	ldr	r0, [pc, #604]	; (80005d0 <display7SEG1+0x31c>)
 8000374:	f001 fc4d 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);   // g off
 8000378:	2201      	movs	r2, #1
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4894      	ldr	r0, [pc, #592]	; (80005d0 <display7SEG1+0x31c>)
 800037e:	f001 fc48 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 8000382:	e120      	b.n	80005c6 <display7SEG1+0x312>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4891      	ldr	r0, [pc, #580]	; (80005d0 <display7SEG1+0x31c>)
 800038a:	f001 fc42 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	488f      	ldr	r0, [pc, #572]	; (80005d0 <display7SEG1+0x31c>)
 8000394:	f001 fc3d 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);   // c off
 8000398:	2201      	movs	r2, #1
 800039a:	2104      	movs	r1, #4
 800039c:	488c      	ldr	r0, [pc, #560]	; (80005d0 <display7SEG1+0x31c>)
 800039e:	f001 fc38 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // d on
 80003a2:	2200      	movs	r2, #0
 80003a4:	2108      	movs	r1, #8
 80003a6:	488a      	ldr	r0, [pc, #552]	; (80005d0 <display7SEG1+0x31c>)
 80003a8:	f001 fc33 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // e on
 80003ac:	2200      	movs	r2, #0
 80003ae:	2110      	movs	r1, #16
 80003b0:	4887      	ldr	r0, [pc, #540]	; (80005d0 <display7SEG1+0x31c>)
 80003b2:	f001 fc2e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);   // f off
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	4885      	ldr	r0, [pc, #532]	; (80005d0 <display7SEG1+0x31c>)
 80003bc:	f001 fc29 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // g on
 80003c0:	2200      	movs	r2, #0
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4882      	ldr	r0, [pc, #520]	; (80005d0 <display7SEG1+0x31c>)
 80003c6:	f001 fc24 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 80003ca:	e0fc      	b.n	80005c6 <display7SEG1+0x312>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	487f      	ldr	r0, [pc, #508]	; (80005d0 <display7SEG1+0x31c>)
 80003d2:	f001 fc1e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	487d      	ldr	r0, [pc, #500]	; (80005d0 <display7SEG1+0x31c>)
 80003dc:	f001 fc19 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	487a      	ldr	r0, [pc, #488]	; (80005d0 <display7SEG1+0x31c>)
 80003e6:	f001 fc14 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // d on
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	4878      	ldr	r0, [pc, #480]	; (80005d0 <display7SEG1+0x31c>)
 80003f0:	f001 fc0f 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);   // e off
 80003f4:	2201      	movs	r2, #1
 80003f6:	2110      	movs	r1, #16
 80003f8:	4875      	ldr	r0, [pc, #468]	; (80005d0 <display7SEG1+0x31c>)
 80003fa:	f001 fc0a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);   // f off
 80003fe:	2201      	movs	r2, #1
 8000400:	2120      	movs	r1, #32
 8000402:	4873      	ldr	r0, [pc, #460]	; (80005d0 <display7SEG1+0x31c>)
 8000404:	f001 fc05 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // g on
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4870      	ldr	r0, [pc, #448]	; (80005d0 <display7SEG1+0x31c>)
 800040e:	f001 fc00 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 8000412:	e0d8      	b.n	80005c6 <display7SEG1+0x312>
        case 4:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);   // a off
 8000414:	2201      	movs	r2, #1
 8000416:	2101      	movs	r1, #1
 8000418:	486d      	ldr	r0, [pc, #436]	; (80005d0 <display7SEG1+0x31c>)
 800041a:	f001 fbfa 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	486b      	ldr	r0, [pc, #428]	; (80005d0 <display7SEG1+0x31c>)
 8000424:	f001 fbf5 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	4868      	ldr	r0, [pc, #416]	; (80005d0 <display7SEG1+0x31c>)
 800042e:	f001 fbf0 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);   // d off
 8000432:	2201      	movs	r2, #1
 8000434:	2108      	movs	r1, #8
 8000436:	4866      	ldr	r0, [pc, #408]	; (80005d0 <display7SEG1+0x31c>)
 8000438:	f001 fbeb 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);   // e off
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4863      	ldr	r0, [pc, #396]	; (80005d0 <display7SEG1+0x31c>)
 8000442:	f001 fbe6 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // f on
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4861      	ldr	r0, [pc, #388]	; (80005d0 <display7SEG1+0x31c>)
 800044c:	f001 fbe1 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // g on
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	485e      	ldr	r0, [pc, #376]	; (80005d0 <display7SEG1+0x31c>)
 8000456:	f001 fbdc 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 800045a:	e0b4      	b.n	80005c6 <display7SEG1+0x312>
        case 5:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 800045c:	2200      	movs	r2, #0
 800045e:	2101      	movs	r1, #1
 8000460:	485b      	ldr	r0, [pc, #364]	; (80005d0 <display7SEG1+0x31c>)
 8000462:	f001 fbd6 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);   // b off
 8000466:	2201      	movs	r2, #1
 8000468:	2102      	movs	r1, #2
 800046a:	4859      	ldr	r0, [pc, #356]	; (80005d0 <display7SEG1+0x31c>)
 800046c:	f001 fbd1 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 8000470:	2200      	movs	r2, #0
 8000472:	2104      	movs	r1, #4
 8000474:	4856      	ldr	r0, [pc, #344]	; (80005d0 <display7SEG1+0x31c>)
 8000476:	f001 fbcc 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // d on
 800047a:	2200      	movs	r2, #0
 800047c:	2108      	movs	r1, #8
 800047e:	4854      	ldr	r0, [pc, #336]	; (80005d0 <display7SEG1+0x31c>)
 8000480:	f001 fbc7 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);   // e off
 8000484:	2201      	movs	r2, #1
 8000486:	2110      	movs	r1, #16
 8000488:	4851      	ldr	r0, [pc, #324]	; (80005d0 <display7SEG1+0x31c>)
 800048a:	f001 fbc2 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // f on
 800048e:	2200      	movs	r2, #0
 8000490:	2120      	movs	r1, #32
 8000492:	484f      	ldr	r0, [pc, #316]	; (80005d0 <display7SEG1+0x31c>)
 8000494:	f001 fbbd 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // g on
 8000498:	2200      	movs	r2, #0
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	484c      	ldr	r0, [pc, #304]	; (80005d0 <display7SEG1+0x31c>)
 800049e:	f001 fbb8 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 80004a2:	e090      	b.n	80005c6 <display7SEG1+0x312>
        case 6:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 80004a4:	2200      	movs	r2, #0
 80004a6:	2101      	movs	r1, #1
 80004a8:	4849      	ldr	r0, [pc, #292]	; (80005d0 <display7SEG1+0x31c>)
 80004aa:	f001 fbb2 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);   // b off
 80004ae:	2201      	movs	r2, #1
 80004b0:	2102      	movs	r1, #2
 80004b2:	4847      	ldr	r0, [pc, #284]	; (80005d0 <display7SEG1+0x31c>)
 80004b4:	f001 fbad 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 80004b8:	2200      	movs	r2, #0
 80004ba:	2104      	movs	r1, #4
 80004bc:	4844      	ldr	r0, [pc, #272]	; (80005d0 <display7SEG1+0x31c>)
 80004be:	f001 fba8 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // d on
 80004c2:	2200      	movs	r2, #0
 80004c4:	2108      	movs	r1, #8
 80004c6:	4842      	ldr	r0, [pc, #264]	; (80005d0 <display7SEG1+0x31c>)
 80004c8:	f001 fba3 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // e on
 80004cc:	2200      	movs	r2, #0
 80004ce:	2110      	movs	r1, #16
 80004d0:	483f      	ldr	r0, [pc, #252]	; (80005d0 <display7SEG1+0x31c>)
 80004d2:	f001 fb9e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // f on
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	483d      	ldr	r0, [pc, #244]	; (80005d0 <display7SEG1+0x31c>)
 80004dc:	f001 fb99 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // g on
 80004e0:	2200      	movs	r2, #0
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	483a      	ldr	r0, [pc, #232]	; (80005d0 <display7SEG1+0x31c>)
 80004e6:	f001 fb94 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 80004ea:	e06c      	b.n	80005c6 <display7SEG1+0x312>
        case 7:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 80004ec:	2200      	movs	r2, #0
 80004ee:	2101      	movs	r1, #1
 80004f0:	4837      	ldr	r0, [pc, #220]	; (80005d0 <display7SEG1+0x31c>)
 80004f2:	f001 fb8e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 80004f6:	2200      	movs	r2, #0
 80004f8:	2102      	movs	r1, #2
 80004fa:	4835      	ldr	r0, [pc, #212]	; (80005d0 <display7SEG1+0x31c>)
 80004fc:	f001 fb89 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 8000500:	2200      	movs	r2, #0
 8000502:	2104      	movs	r1, #4
 8000504:	4832      	ldr	r0, [pc, #200]	; (80005d0 <display7SEG1+0x31c>)
 8000506:	f001 fb84 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);   // d off
 800050a:	2201      	movs	r2, #1
 800050c:	2108      	movs	r1, #8
 800050e:	4830      	ldr	r0, [pc, #192]	; (80005d0 <display7SEG1+0x31c>)
 8000510:	f001 fb7f 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);   // e off
 8000514:	2201      	movs	r2, #1
 8000516:	2110      	movs	r1, #16
 8000518:	482d      	ldr	r0, [pc, #180]	; (80005d0 <display7SEG1+0x31c>)
 800051a:	f001 fb7a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);   // f off
 800051e:	2201      	movs	r2, #1
 8000520:	2120      	movs	r1, #32
 8000522:	482b      	ldr	r0, [pc, #172]	; (80005d0 <display7SEG1+0x31c>)
 8000524:	f001 fb75 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);   // g off
 8000528:	2201      	movs	r2, #1
 800052a:	2140      	movs	r1, #64	; 0x40
 800052c:	4828      	ldr	r0, [pc, #160]	; (80005d0 <display7SEG1+0x31c>)
 800052e:	f001 fb70 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 8000532:	e048      	b.n	80005c6 <display7SEG1+0x312>
        case 8:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	4825      	ldr	r0, [pc, #148]	; (80005d0 <display7SEG1+0x31c>)
 800053a:	f001 fb6a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 800053e:	2200      	movs	r2, #0
 8000540:	2102      	movs	r1, #2
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <display7SEG1+0x31c>)
 8000544:	f001 fb65 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 8000548:	2200      	movs	r2, #0
 800054a:	2104      	movs	r1, #4
 800054c:	4820      	ldr	r0, [pc, #128]	; (80005d0 <display7SEG1+0x31c>)
 800054e:	f001 fb60 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // d on
 8000552:	2200      	movs	r2, #0
 8000554:	2108      	movs	r1, #8
 8000556:	481e      	ldr	r0, [pc, #120]	; (80005d0 <display7SEG1+0x31c>)
 8000558:	f001 fb5b 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET); // e on
 800055c:	2200      	movs	r2, #0
 800055e:	2110      	movs	r1, #16
 8000560:	481b      	ldr	r0, [pc, #108]	; (80005d0 <display7SEG1+0x31c>)
 8000562:	f001 fb56 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // f on
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	4819      	ldr	r0, [pc, #100]	; (80005d0 <display7SEG1+0x31c>)
 800056c:	f001 fb51 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // g on
 8000570:	2200      	movs	r2, #0
 8000572:	2140      	movs	r1, #64	; 0x40
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <display7SEG1+0x31c>)
 8000576:	f001 fb4c 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 800057a:	e024      	b.n	80005c6 <display7SEG1+0x312>
        case 9:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); // a on
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <display7SEG1+0x31c>)
 8000582:	f001 fb46 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); // b on
 8000586:	2200      	movs	r2, #0
 8000588:	2102      	movs	r1, #2
 800058a:	4811      	ldr	r0, [pc, #68]	; (80005d0 <display7SEG1+0x31c>)
 800058c:	f001 fb41 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET); // c on
 8000590:	2200      	movs	r2, #0
 8000592:	2104      	movs	r1, #4
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <display7SEG1+0x31c>)
 8000596:	f001 fb3c 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET); // d on
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <display7SEG1+0x31c>)
 80005a0:	f001 fb37 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);   // e off
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <display7SEG1+0x31c>)
 80005aa:	f001 fb32 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET); // f on
 80005ae:	2200      	movs	r2, #0
 80005b0:	2120      	movs	r1, #32
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <display7SEG1+0x31c>)
 80005b4:	f001 fb2d 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET); // g on
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <display7SEG1+0x31c>)
 80005be:	f001 fb28 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 80005c2:	e000      	b.n	80005c6 <display7SEG1+0x312>
        default:
            // Do nothing or invalid paramters
            break;
 80005c4:	bf00      	nop
    }
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <display7SEG2>:

void display7SEG2(int num)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b09      	cmp	r3, #9
 80005e0:	f200 81bc 	bhi.w	800095c <display7SEG2+0x388>
 80005e4:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <display7SEG2+0x18>)
 80005e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ea:	bf00      	nop
 80005ec:	08000615 	.word	0x08000615
 80005f0:	08000669 	.word	0x08000669
 80005f4:	080006bd 	.word	0x080006bd
 80005f8:	08000711 	.word	0x08000711
 80005fc:	08000765 	.word	0x08000765
 8000600:	080007b9 	.word	0x080007b9
 8000604:	0800080d 	.word	0x0800080d
 8000608:	08000861 	.word	0x08000861
 800060c:	080008b5 	.word	0x080008b5
 8000610:	08000909 	.word	0x08000909
    switch (num)
    {
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 8000614:	2200      	movs	r2, #0
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	48d3      	ldr	r0, [pc, #844]	; (8000968 <display7SEG2+0x394>)
 800061a:	f001 fafa 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	48d0      	ldr	r0, [pc, #832]	; (8000968 <display7SEG2+0x394>)
 8000626:	f001 faf4 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000630:	48cd      	ldr	r0, [pc, #820]	; (8000968 <display7SEG2+0x394>)
 8000632:	f001 faee 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET); // d on
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063c:	48ca      	ldr	r0, [pc, #808]	; (8000968 <display7SEG2+0x394>)
 800063e:	f001 fae8 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); // e on
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000648:	48c7      	ldr	r0, [pc, #796]	; (8000968 <display7SEG2+0x394>)
 800064a:	f001 fae2 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); // f on
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000654:	48c4      	ldr	r0, [pc, #784]	; (8000968 <display7SEG2+0x394>)
 8000656:	f001 fadc 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);   // g off
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000660:	48c1      	ldr	r0, [pc, #772]	; (8000968 <display7SEG2+0x394>)
 8000662:	f001 fad6 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 8000666:	e17a      	b.n	800095e <display7SEG2+0x38a>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);   // a off
 8000668:	2201      	movs	r2, #1
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	48be      	ldr	r0, [pc, #760]	; (8000968 <display7SEG2+0x394>)
 800066e:	f001 fad0 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	48bb      	ldr	r0, [pc, #748]	; (8000968 <display7SEG2+0x394>)
 800067a:	f001 faca 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000684:	48b8      	ldr	r0, [pc, #736]	; (8000968 <display7SEG2+0x394>)
 8000686:	f001 fac4 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);   // d off
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000690:	48b5      	ldr	r0, [pc, #724]	; (8000968 <display7SEG2+0x394>)
 8000692:	f001 fabe 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);   // e off
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800069c:	48b2      	ldr	r0, [pc, #712]	; (8000968 <display7SEG2+0x394>)
 800069e:	f001 fab8 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);   // f off
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	48af      	ldr	r0, [pc, #700]	; (8000968 <display7SEG2+0x394>)
 80006aa:	f001 fab2 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);   // g off
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	48ac      	ldr	r0, [pc, #688]	; (8000968 <display7SEG2+0x394>)
 80006b6:	f001 faac 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 80006ba:	e150      	b.n	800095e <display7SEG2+0x38a>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 80006bc:	2200      	movs	r2, #0
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	48a9      	ldr	r0, [pc, #676]	; (8000968 <display7SEG2+0x394>)
 80006c2:	f001 faa6 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	48a6      	ldr	r0, [pc, #664]	; (8000968 <display7SEG2+0x394>)
 80006ce:	f001 faa0 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);   // c off
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	48a3      	ldr	r0, [pc, #652]	; (8000968 <display7SEG2+0x394>)
 80006da:	f001 fa9a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET); // d on
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	48a0      	ldr	r0, [pc, #640]	; (8000968 <display7SEG2+0x394>)
 80006e6:	f001 fa94 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); // e on
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	489d      	ldr	r0, [pc, #628]	; (8000968 <display7SEG2+0x394>)
 80006f2:	f001 fa8e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);   // f off
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	489a      	ldr	r0, [pc, #616]	; (8000968 <display7SEG2+0x394>)
 80006fe:	f001 fa88 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // g on
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	4897      	ldr	r0, [pc, #604]	; (8000968 <display7SEG2+0x394>)
 800070a:	f001 fa82 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 800070e:	e126      	b.n	800095e <display7SEG2+0x38a>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 8000710:	2200      	movs	r2, #0
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4894      	ldr	r0, [pc, #592]	; (8000968 <display7SEG2+0x394>)
 8000716:	f001 fa7c 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	4891      	ldr	r0, [pc, #580]	; (8000968 <display7SEG2+0x394>)
 8000722:	f001 fa76 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072c:	488e      	ldr	r0, [pc, #568]	; (8000968 <display7SEG2+0x394>)
 800072e:	f001 fa70 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET); // d on
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <display7SEG2+0x394>)
 800073a:	f001 fa6a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);   // e off
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	4888      	ldr	r0, [pc, #544]	; (8000968 <display7SEG2+0x394>)
 8000746:	f001 fa64 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);   // f off
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000750:	4885      	ldr	r0, [pc, #532]	; (8000968 <display7SEG2+0x394>)
 8000752:	f001 fa5e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // g on
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	4882      	ldr	r0, [pc, #520]	; (8000968 <display7SEG2+0x394>)
 800075e:	f001 fa58 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 8000762:	e0fc      	b.n	800095e <display7SEG2+0x38a>
        case 4:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);   // a off
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	487f      	ldr	r0, [pc, #508]	; (8000968 <display7SEG2+0x394>)
 800076a:	f001 fa52 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	487c      	ldr	r0, [pc, #496]	; (8000968 <display7SEG2+0x394>)
 8000776:	f001 fa4c 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	4879      	ldr	r0, [pc, #484]	; (8000968 <display7SEG2+0x394>)
 8000782:	f001 fa46 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);   // d off
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	4876      	ldr	r0, [pc, #472]	; (8000968 <display7SEG2+0x394>)
 800078e:	f001 fa40 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);   // e off
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000798:	4873      	ldr	r0, [pc, #460]	; (8000968 <display7SEG2+0x394>)
 800079a:	f001 fa3a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); // f on
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4870      	ldr	r0, [pc, #448]	; (8000968 <display7SEG2+0x394>)
 80007a6:	f001 fa34 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // g on
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b0:	486d      	ldr	r0, [pc, #436]	; (8000968 <display7SEG2+0x394>)
 80007b2:	f001 fa2e 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 80007b6:	e0d2      	b.n	800095e <display7SEG2+0x38a>
        case 5:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	486a      	ldr	r0, [pc, #424]	; (8000968 <display7SEG2+0x394>)
 80007be:	f001 fa28 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);   // b off
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	4867      	ldr	r0, [pc, #412]	; (8000968 <display7SEG2+0x394>)
 80007ca:	f001 fa22 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4864      	ldr	r0, [pc, #400]	; (8000968 <display7SEG2+0x394>)
 80007d6:	f001 fa1c 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET); // d on
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e0:	4861      	ldr	r0, [pc, #388]	; (8000968 <display7SEG2+0x394>)
 80007e2:	f001 fa16 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);   // e off
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	485e      	ldr	r0, [pc, #376]	; (8000968 <display7SEG2+0x394>)
 80007ee:	f001 fa10 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); // f on
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	485b      	ldr	r0, [pc, #364]	; (8000968 <display7SEG2+0x394>)
 80007fa:	f001 fa0a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // g on
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4858      	ldr	r0, [pc, #352]	; (8000968 <display7SEG2+0x394>)
 8000806:	f001 fa04 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 800080a:	e0a8      	b.n	800095e <display7SEG2+0x38a>
        case 6:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 800080c:	2200      	movs	r2, #0
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	4855      	ldr	r0, [pc, #340]	; (8000968 <display7SEG2+0x394>)
 8000812:	f001 f9fe 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);   // b off
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4852      	ldr	r0, [pc, #328]	; (8000968 <display7SEG2+0x394>)
 800081e:	f001 f9f8 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	484f      	ldr	r0, [pc, #316]	; (8000968 <display7SEG2+0x394>)
 800082a:	f001 f9f2 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET); // d on
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000834:	484c      	ldr	r0, [pc, #304]	; (8000968 <display7SEG2+0x394>)
 8000836:	f001 f9ec 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); // e on
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000840:	4849      	ldr	r0, [pc, #292]	; (8000968 <display7SEG2+0x394>)
 8000842:	f001 f9e6 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); // f on
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084c:	4846      	ldr	r0, [pc, #280]	; (8000968 <display7SEG2+0x394>)
 800084e:	f001 f9e0 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // g on
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000858:	4843      	ldr	r0, [pc, #268]	; (8000968 <display7SEG2+0x394>)
 800085a:	f001 f9da 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 800085e:	e07e      	b.n	800095e <display7SEG2+0x38a>
        case 7:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 8000860:	2200      	movs	r2, #0
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	4840      	ldr	r0, [pc, #256]	; (8000968 <display7SEG2+0x394>)
 8000866:	f001 f9d4 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000870:	483d      	ldr	r0, [pc, #244]	; (8000968 <display7SEG2+0x394>)
 8000872:	f001 f9ce 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087c:	483a      	ldr	r0, [pc, #232]	; (8000968 <display7SEG2+0x394>)
 800087e:	f001 f9c8 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);   // d off
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	4837      	ldr	r0, [pc, #220]	; (8000968 <display7SEG2+0x394>)
 800088a:	f001 f9c2 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);   // e off
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000894:	4834      	ldr	r0, [pc, #208]	; (8000968 <display7SEG2+0x394>)
 8000896:	f001 f9bc 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);   // f off
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a0:	4831      	ldr	r0, [pc, #196]	; (8000968 <display7SEG2+0x394>)
 80008a2:	f001 f9b6 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);   // g off
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ac:	482e      	ldr	r0, [pc, #184]	; (8000968 <display7SEG2+0x394>)
 80008ae:	f001 f9b0 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 80008b2:	e054      	b.n	800095e <display7SEG2+0x38a>
        case 8:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	482b      	ldr	r0, [pc, #172]	; (8000968 <display7SEG2+0x394>)
 80008ba:	f001 f9aa 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c4:	4828      	ldr	r0, [pc, #160]	; (8000968 <display7SEG2+0x394>)
 80008c6:	f001 f9a4 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	4825      	ldr	r0, [pc, #148]	; (8000968 <display7SEG2+0x394>)
 80008d2:	f001 f99e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET); // d on
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008dc:	4822      	ldr	r0, [pc, #136]	; (8000968 <display7SEG2+0x394>)
 80008de:	f001 f998 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET); // e on
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <display7SEG2+0x394>)
 80008ea:	f001 f992 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); // f on
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f4:	481c      	ldr	r0, [pc, #112]	; (8000968 <display7SEG2+0x394>)
 80008f6:	f001 f98c 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // g on
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000900:	4819      	ldr	r0, [pc, #100]	; (8000968 <display7SEG2+0x394>)
 8000902:	f001 f986 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 8000906:	e02a      	b.n	800095e <display7SEG2+0x38a>
        case 9:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET); // a on
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	4816      	ldr	r0, [pc, #88]	; (8000968 <display7SEG2+0x394>)
 800090e:	f001 f980 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // b on
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <display7SEG2+0x394>)
 800091a:	f001 f97a 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET); // c on
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <display7SEG2+0x394>)
 8000926:	f001 f974 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET); // d on
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <display7SEG2+0x394>)
 8000932:	f001 f96e 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);   // e off
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093c:	480a      	ldr	r0, [pc, #40]	; (8000968 <display7SEG2+0x394>)
 800093e:	f001 f968 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET); // f on
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <display7SEG2+0x394>)
 800094a:	f001 f962 	bl	8001c12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET); // g on
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <display7SEG2+0x394>)
 8000956:	f001 f95c 	bl	8001c12 <HAL_GPIO_WritePin>
            break;
 800095a:	e000      	b.n	800095e <display7SEG2+0x38a>
        default:
            // Do nothing or invalid paramters
            break;
 800095c:	bf00      	nop
    }
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40010c00 	.word	0x40010c00

0800096c <display_7SEG_automatic>:

void display_7SEG_automatic()
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	switch(enable7SEG)
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <display_7SEG_automatic+0xf0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <display_7SEG_automatic+0x12>
 8000978:	2b01      	cmp	r3, #1
 800097a:	d035      	beq.n	80009e8 <display_7SEG_automatic+0x7c>
				setTimer(3, 50);
				enable7SEG = EN0;
			}
			break;
		default:
			break;
 800097c:	e06c      	b.n	8000a58 <display_7SEG_automatic+0xec>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	4836      	ldr	r0, [pc, #216]	; (8000a60 <display_7SEG_automatic+0xf4>)
 8000986:	f001 f944 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	4833      	ldr	r0, [pc, #204]	; (8000a60 <display_7SEG_automatic+0xf4>)
 8000992:	f001 f93e 	bl	8001c12 <HAL_GPIO_WritePin>
			display7SEG1(countdown1 / 10);
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <display_7SEG_automatic+0xf8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a33      	ldr	r2, [pc, #204]	; (8000a68 <display_7SEG_automatic+0xfc>)
 800099c:	fb82 1203 	smull	r1, r2, r2, r3
 80009a0:	1092      	asrs	r2, r2, #2
 80009a2:	17db      	asrs	r3, r3, #31
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fc84 	bl	80002b4 <display7SEG1>
			display7SEG2(countdown1 % 10);
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <display_7SEG_automatic+0xf8>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <display_7SEG_automatic+0xfc>)
 80009b2:	fb83 1302 	smull	r1, r3, r3, r2
 80009b6:	1099      	asrs	r1, r3, #2
 80009b8:	17d3      	asrs	r3, r2, #31
 80009ba:	1ac9      	subs	r1, r1, r3
 80009bc:	460b      	mov	r3, r1
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	1ad1      	subs	r1, r2, r3
 80009c6:	4608      	mov	r0, r1
 80009c8:	f7ff fe04 	bl	80005d4 <display7SEG2>
			if(isTimeExpired(3) == 1)
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 fd27 	bl	8001420 <isTimeExpired>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d13c      	bne.n	8000a52 <display_7SEG_automatic+0xe6>
				setTimer(3, 50);
 80009d8:	2132      	movs	r1, #50	; 0x32
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 fd08 	bl	80013f0 <setTimer>
				enable7SEG = EN1;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <display_7SEG_automatic+0xf0>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
			break;
 80009e6:	e034      	b.n	8000a52 <display_7SEG_automatic+0xe6>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ee:	481c      	ldr	r0, [pc, #112]	; (8000a60 <display_7SEG_automatic+0xf4>)
 80009f0:	f001 f90f 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4819      	ldr	r0, [pc, #100]	; (8000a60 <display_7SEG_automatic+0xf4>)
 80009fc:	f001 f909 	bl	8001c12 <HAL_GPIO_WritePin>
			display7SEG1(countdown2 / 10);
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <display_7SEG_automatic+0x100>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <display_7SEG_automatic+0xfc>)
 8000a06:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0a:	1092      	asrs	r2, r2, #2
 8000a0c:	17db      	asrs	r3, r3, #31
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fc4f 	bl	80002b4 <display7SEG1>
			display7SEG2(countdown2 % 10);
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <display_7SEG_automatic+0x100>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <display_7SEG_automatic+0xfc>)
 8000a1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a20:	1099      	asrs	r1, r3, #2
 8000a22:	17d3      	asrs	r3, r2, #31
 8000a24:	1ac9      	subs	r1, r1, r3
 8000a26:	460b      	mov	r3, r1
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	1ad1      	subs	r1, r2, r3
 8000a30:	4608      	mov	r0, r1
 8000a32:	f7ff fdcf 	bl	80005d4 <display7SEG2>
			if(isTimeExpired(3) == 1)
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 fcf2 	bl	8001420 <isTimeExpired>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d109      	bne.n	8000a56 <display_7SEG_automatic+0xea>
				setTimer(3, 50);
 8000a42:	2132      	movs	r1, #50	; 0x32
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 fcd3 	bl	80013f0 <setTimer>
				enable7SEG = EN0;
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <display_7SEG_automatic+0xf0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
			break;
 8000a50:	e001      	b.n	8000a56 <display_7SEG_automatic+0xea>
			break;
 8000a52:	bf00      	nop
 8000a54:	e000      	b.n	8000a58 <display_7SEG_automatic+0xec>
			break;
 8000a56:	bf00      	nop
	}
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000009c 	.word	0x2000009c
 8000a60:	40010800 	.word	0x40010800
 8000a64:	200000a4 	.word	0x200000a4
 8000a68:	66666667 	.word	0x66666667
 8000a6c:	200000a8 	.word	0x200000a8

08000a70 <display_7SEG_manual>:

void display_7SEG_manual()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	switch(enable7SEG)
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <display_7SEG_manual+0xcc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <display_7SEG_manual+0x12>
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d022      	beq.n	8000ac6 <display_7SEG_manual+0x56>
				setTimer(3, 50);
				enable7SEG = EN0;
			}
			break;
		default:
			break;
 8000a80:	e059      	b.n	8000b36 <display_7SEG_manual+0xc6>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	482d      	ldr	r0, [pc, #180]	; (8000b40 <display_7SEG_manual+0xd0>)
 8000a8a:	f001 f8c2 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	482a      	ldr	r0, [pc, #168]	; (8000b40 <display_7SEG_manual+0xd0>)
 8000a96:	f001 f8bc 	bl	8001c12 <HAL_GPIO_WritePin>
			display7SEG1(0);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fc0a 	bl	80002b4 <display7SEG1>
			display7SEG2(mode);
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <display_7SEG_manual+0xd4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd95 	bl	80005d4 <display7SEG2>
			if(isTimeExpired(3) == 1)
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f000 fcb8 	bl	8001420 <isTimeExpired>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d13c      	bne.n	8000b30 <display_7SEG_manual+0xc0>
				setTimer(3, 50);
 8000ab6:	2132      	movs	r1, #50	; 0x32
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 fc99 	bl	80013f0 <setTimer>
				enable7SEG = EN1;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <display_7SEG_manual+0xcc>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
			break;
 8000ac4:	e034      	b.n	8000b30 <display_7SEG_manual+0xc0>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <display_7SEG_manual+0xd0>)
 8000ace:	f001 f8a0 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	4819      	ldr	r0, [pc, #100]	; (8000b40 <display_7SEG_manual+0xd0>)
 8000ada:	f001 f89a 	bl	8001c12 <HAL_GPIO_WritePin>
			display7SEG1(count / 10);
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <display_7SEG_manual+0xd8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <display_7SEG_manual+0xdc>)
 8000ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae8:	1092      	asrs	r2, r2, #2
 8000aea:	17db      	asrs	r3, r3, #31
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fbe0 	bl	80002b4 <display7SEG1>
			display7SEG2(count % 10);
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <display_7SEG_manual+0xd8>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <display_7SEG_manual+0xdc>)
 8000afa:	fb83 1302 	smull	r1, r3, r3, r2
 8000afe:	1099      	asrs	r1, r3, #2
 8000b00:	17d3      	asrs	r3, r2, #31
 8000b02:	1ac9      	subs	r1, r1, r3
 8000b04:	460b      	mov	r3, r1
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	1ad1      	subs	r1, r2, r3
 8000b0e:	4608      	mov	r0, r1
 8000b10:	f7ff fd60 	bl	80005d4 <display7SEG2>
			if(isTimeExpired(3) == 1)
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 fc83 	bl	8001420 <isTimeExpired>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d109      	bne.n	8000b34 <display_7SEG_manual+0xc4>
				setTimer(3, 50);
 8000b20:	2132      	movs	r1, #50	; 0x32
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 fc64 	bl	80013f0 <setTimer>
				enable7SEG = EN0;
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <display_7SEG_manual+0xcc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
			break;
 8000b2e:	e001      	b.n	8000b34 <display_7SEG_manual+0xc4>
			break;
 8000b30:	bf00      	nop
 8000b32:	e000      	b.n	8000b36 <display_7SEG_manual+0xc6>
			break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000009c 	.word	0x2000009c
 8000b40:	40010800 	.word	0x40010800
 8000b44:	20000058 	.word	0x20000058
 8000b48:	200000a0 	.word	0x200000a0
 8000b4c:	66666667 	.word	0x66666667

08000b50 <fsm_automatic_run>:
 */

#include "global.h"

void fsm_automatic_run()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	switch (status1)
 8000b54:	4bb3      	ldr	r3, [pc, #716]	; (8000e24 <fsm_automatic_run+0x2d4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	f200 80bd 	bhi.w	8000cda <fsm_automatic_run+0x18a>
 8000b60:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <fsm_automatic_run+0x18>)
 8000b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b66:	bf00      	nop
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000bbb 	.word	0x08000bbb
 8000b70:	08000c1b 	.word	0x08000c1b
 8000b74:	08000c7b 	.word	0x08000c7b
	{
		case INIT:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	48aa      	ldr	r0, [pc, #680]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000b7e:	f001 f848 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2110      	movs	r1, #16
 8000b86:	48a8      	ldr	r0, [pc, #672]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000b88:	f001 f843 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2108      	movs	r1, #8
 8000b90:	48a5      	ldr	r0, [pc, #660]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000b92:	f001 f83e 	bl	8001c12 <HAL_GPIO_WritePin>
			status1 = AUTO_RED;
 8000b96:	4ba3      	ldr	r3, [pc, #652]	; (8000e24 <fsm_automatic_run+0x2d4>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	601a      	str	r2, [r3, #0]
			countdown1 = timer_red/1000;
 8000b9c:	4ba3      	ldr	r3, [pc, #652]	; (8000e2c <fsm_automatic_run+0x2dc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4aa3      	ldr	r2, [pc, #652]	; (8000e30 <fsm_automatic_run+0x2e0>)
 8000ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba6:	1192      	asrs	r2, r2, #6
 8000ba8:	17db      	asrs	r3, r3, #31
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	4aa1      	ldr	r2, [pc, #644]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000bae:	6013      	str	r3, [r2, #0]
			setTimer(1, 100);
 8000bb0:	2164      	movs	r1, #100	; 0x64
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 fc1c 	bl	80013f0 <setTimer>
			break;
 8000bb8:	e096      	b.n	8000ce8 <fsm_automatic_run+0x198>
		case AUTO_RED:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	489a      	ldr	r0, [pc, #616]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000bc0:	f001 f827 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4897      	ldr	r0, [pc, #604]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000bca:	f001 f822 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	4895      	ldr	r0, [pc, #596]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000bd4:	f001 f81d 	bl	8001c12 <HAL_GPIO_WritePin>
			if (isTimeExpired(1) == 1)
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f000 fc21 	bl	8001420 <isTimeExpired>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d17c      	bne.n	8000cde <fsm_automatic_run+0x18e>
			{
				countdown1--;
 8000be4:	4b93      	ldr	r3, [pc, #588]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a92      	ldr	r2, [pc, #584]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000bec:	6013      	str	r3, [r2, #0]
				setTimer(1, 100);
 8000bee:	2164      	movs	r1, #100	; 0x64
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fbfd 	bl	80013f0 <setTimer>
				if (countdown1 <= 0)
 8000bf6:	4b8f      	ldr	r3, [pc, #572]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dc6f      	bgt.n	8000cde <fsm_automatic_run+0x18e>
				{
					status1 = AUTO_GREEN;
 8000bfe:	4b89      	ldr	r3, [pc, #548]	; (8000e24 <fsm_automatic_run+0x2d4>)
 8000c00:	2203      	movs	r2, #3
 8000c02:	601a      	str	r2, [r3, #0]
					countdown1 = timer_green/1000;
 8000c04:	4b8c      	ldr	r3, [pc, #560]	; (8000e38 <fsm_automatic_run+0x2e8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a89      	ldr	r2, [pc, #548]	; (8000e30 <fsm_automatic_run+0x2e0>)
 8000c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0e:	1192      	asrs	r2, r2, #6
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	4a87      	ldr	r2, [pc, #540]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000c16:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8000c18:	e061      	b.n	8000cde <fsm_automatic_run+0x18e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4882      	ldr	r0, [pc, #520]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000c20:	f000 fff7 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2110      	movs	r1, #16
 8000c28:	487f      	ldr	r0, [pc, #508]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000c2a:	f000 fff2 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2108      	movs	r1, #8
 8000c32:	487d      	ldr	r0, [pc, #500]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000c34:	f000 ffed 	bl	8001c12 <HAL_GPIO_WritePin>
			if (isTimeExpired(1) == 1)
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f000 fbf1 	bl	8001420 <isTimeExpired>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d14e      	bne.n	8000ce2 <fsm_automatic_run+0x192>
			{
				countdown1--;
 8000c44:	4b7b      	ldr	r3, [pc, #492]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	4a7a      	ldr	r2, [pc, #488]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000c4c:	6013      	str	r3, [r2, #0]
				setTimer(1, 100);
 8000c4e:	2164      	movs	r1, #100	; 0x64
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 fbcd 	bl	80013f0 <setTimer>
				if (countdown1 <= 0)
 8000c56:	4b77      	ldr	r3, [pc, #476]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	dc41      	bgt.n	8000ce2 <fsm_automatic_run+0x192>
				{
					status1 = AUTO_YELLOW;
 8000c5e:	4b71      	ldr	r3, [pc, #452]	; (8000e24 <fsm_automatic_run+0x2d4>)
 8000c60:	2204      	movs	r2, #4
 8000c62:	601a      	str	r2, [r3, #0]
					countdown1 = timer_yellow/1000;
 8000c64:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <fsm_automatic_run+0x2ec>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a71      	ldr	r2, [pc, #452]	; (8000e30 <fsm_automatic_run+0x2e0>)
 8000c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6e:	1192      	asrs	r2, r2, #6
 8000c70:	17db      	asrs	r3, r3, #31
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	4a6f      	ldr	r2, [pc, #444]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000c76:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8000c78:	e033      	b.n	8000ce2 <fsm_automatic_run+0x192>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	486a      	ldr	r0, [pc, #424]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000c80:	f000 ffc7 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2110      	movs	r1, #16
 8000c88:	4867      	ldr	r0, [pc, #412]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000c8a:	f000 ffc2 	bl	8001c12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	4865      	ldr	r0, [pc, #404]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000c94:	f000 ffbd 	bl	8001c12 <HAL_GPIO_WritePin>
			if (isTimeExpired(1) == 1)
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fbc1 	bl	8001420 <isTimeExpired>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d120      	bne.n	8000ce6 <fsm_automatic_run+0x196>
			{
				countdown1--;
 8000ca4:	4b63      	ldr	r3, [pc, #396]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	4a62      	ldr	r2, [pc, #392]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000cac:	6013      	str	r3, [r2, #0]
				setTimer(1, 100);
 8000cae:	2164      	movs	r1, #100	; 0x64
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fb9d 	bl	80013f0 <setTimer>
				if (countdown1 <= 0)
 8000cb6:	4b5f      	ldr	r3, [pc, #380]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	dc13      	bgt.n	8000ce6 <fsm_automatic_run+0x196>
				{
					status1 = AUTO_RED;
 8000cbe:	4b59      	ldr	r3, [pc, #356]	; (8000e24 <fsm_automatic_run+0x2d4>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	601a      	str	r2, [r3, #0]
					countdown1 = timer_red/1000;
 8000cc4:	4b59      	ldr	r3, [pc, #356]	; (8000e2c <fsm_automatic_run+0x2dc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a59      	ldr	r2, [pc, #356]	; (8000e30 <fsm_automatic_run+0x2e0>)
 8000cca:	fb82 1203 	smull	r1, r2, r2, r3
 8000cce:	1192      	asrs	r2, r2, #6
 8000cd0:	17db      	asrs	r3, r3, #31
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <fsm_automatic_run+0x2e4>)
 8000cd6:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8000cd8:	e005      	b.n	8000ce6 <fsm_automatic_run+0x196>
		default:
			break;
 8000cda:	bf00      	nop
 8000cdc:	e004      	b.n	8000ce8 <fsm_automatic_run+0x198>
			break;
 8000cde:	bf00      	nop
 8000ce0:	e002      	b.n	8000ce8 <fsm_automatic_run+0x198>
			break;
 8000ce2:	bf00      	nop
 8000ce4:	e000      	b.n	8000ce8 <fsm_automatic_run+0x198>
			break;
 8000ce6:	bf00      	nop
	}

	switch (status2)
 8000ce8:	4b55      	ldr	r3, [pc, #340]	; (8000e40 <fsm_automatic_run+0x2f0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	f200 80dd 	bhi.w	8000eae <fsm_automatic_run+0x35e>
 8000cf4:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <fsm_automatic_run+0x1ac>)
 8000cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfa:	bf00      	nop
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000d55 	.word	0x08000d55
 8000d04:	08000dbf 	.word	0x08000dbf
 8000d08:	08000e49 	.word	0x08000e49
		{
			case INIT:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d12:	4845      	ldr	r0, [pc, #276]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000d14:	f000 ff7d 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1e:	4842      	ldr	r0, [pc, #264]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000d20:	f000 ff77 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2a:	483f      	ldr	r0, [pc, #252]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000d2c:	f000 ff71 	bl	8001c12 <HAL_GPIO_WritePin>
				status2 = AUTO_GREEN;
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <fsm_automatic_run+0x2f0>)
 8000d32:	2203      	movs	r2, #3
 8000d34:	601a      	str	r2, [r3, #0]
				countdown2 = timer_green/1000;
 8000d36:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <fsm_automatic_run+0x2e8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a3d      	ldr	r2, [pc, #244]	; (8000e30 <fsm_automatic_run+0x2e0>)
 8000d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d40:	1192      	asrs	r2, r2, #6
 8000d42:	17db      	asrs	r3, r3, #31
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	4a3f      	ldr	r2, [pc, #252]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000d48:	6013      	str	r3, [r2, #0]
				setTimer(2, 100);
 8000d4a:	2164      	movs	r1, #100	; 0x64
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f000 fb4f 	bl	80013f0 <setTimer>
				break;
 8000d52:	e0b3      	b.n	8000ebc <fsm_automatic_run+0x36c>
			case AUTO_RED:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5a:	4833      	ldr	r0, [pc, #204]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000d5c:	f000 ff59 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d66:	4830      	ldr	r0, [pc, #192]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000d68:	f000 ff53 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	482d      	ldr	r0, [pc, #180]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000d74:	f000 ff4d 	bl	8001c12 <HAL_GPIO_WritePin>
				if (isTimeExpired(2) == 1)
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f000 fb51 	bl	8001420 <isTimeExpired>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f040 8096 	bne.w	8000eb2 <fsm_automatic_run+0x362>
				{
					countdown2--;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000d8e:	6013      	str	r3, [r2, #0]
					setTimer(2, 100);
 8000d90:	2164      	movs	r1, #100	; 0x64
 8000d92:	2002      	movs	r0, #2
 8000d94:	f000 fb2c 	bl	80013f0 <setTimer>
					if (countdown2 == 0)
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f040 8088 	bne.w	8000eb2 <fsm_automatic_run+0x362>
					{
						status2 = AUTO_GREEN;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <fsm_automatic_run+0x2f0>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	601a      	str	r2, [r3, #0]
						countdown2 = timer_green/1000;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <fsm_automatic_run+0x2e8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <fsm_automatic_run+0x2e0>)
 8000dae:	fb82 1203 	smull	r1, r2, r2, r3
 8000db2:	1192      	asrs	r2, r2, #6
 8000db4:	17db      	asrs	r3, r3, #31
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000dba:	6013      	str	r3, [r2, #0]
					}
				}
				break;
 8000dbc:	e079      	b.n	8000eb2 <fsm_automatic_run+0x362>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	4818      	ldr	r0, [pc, #96]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000dc6:	f000 ff24 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	4815      	ldr	r0, [pc, #84]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000dd2:	f000 ff1e 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <fsm_automatic_run+0x2d8>)
 8000dde:	f000 ff18 	bl	8001c12 <HAL_GPIO_WritePin>
				if (isTimeExpired(2) == 1)
 8000de2:	2002      	movs	r0, #2
 8000de4:	f000 fb1c 	bl	8001420 <isTimeExpired>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d163      	bne.n	8000eb6 <fsm_automatic_run+0x366>
				{
					countdown2--;
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000df6:	6013      	str	r3, [r2, #0]
					setTimer(2, 100);
 8000df8:	2164      	movs	r1, #100	; 0x64
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f000 faf8 	bl	80013f0 <setTimer>
					if (countdown2 == 0)
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d156      	bne.n	8000eb6 <fsm_automatic_run+0x366>
					{
						status2 = AUTO_YELLOW;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <fsm_automatic_run+0x2f0>)
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	601a      	str	r2, [r3, #0]
						countdown2 = timer_yellow/1000;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <fsm_automatic_run+0x2ec>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <fsm_automatic_run+0x2e0>)
 8000e14:	fb82 1203 	smull	r1, r2, r2, r3
 8000e18:	1192      	asrs	r2, r2, #6
 8000e1a:	17db      	asrs	r3, r3, #31
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <fsm_automatic_run+0x2f4>)
 8000e20:	6013      	str	r3, [r2, #0]
					}
				}
				break;
 8000e22:	e048      	b.n	8000eb6 <fsm_automatic_run+0x366>
 8000e24:	20000050 	.word	0x20000050
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	2000005c 	.word	0x2000005c
 8000e30:	10624dd3 	.word	0x10624dd3
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	20000064 	.word	0x20000064
 8000e3c:	20000060 	.word	0x20000060
 8000e40:	20000054 	.word	0x20000054
 8000e44:	200000a8 	.word	0x200000a8
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4e:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <fsm_automatic_run+0x370>)
 8000e50:	f000 fedf 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5a:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <fsm_automatic_run+0x370>)
 8000e5c:	f000 fed9 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <fsm_automatic_run+0x370>)
 8000e68:	f000 fed3 	bl	8001c12 <HAL_GPIO_WritePin>
				if (isTimeExpired(2) == 1)
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f000 fad7 	bl	8001420 <isTimeExpired>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d120      	bne.n	8000eba <fsm_automatic_run+0x36a>
				{
					countdown2--;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <fsm_automatic_run+0x374>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <fsm_automatic_run+0x374>)
 8000e80:	6013      	str	r3, [r2, #0]
					setTimer(2, 100);
 8000e82:	2164      	movs	r1, #100	; 0x64
 8000e84:	2002      	movs	r0, #2
 8000e86:	f000 fab3 	bl	80013f0 <setTimer>
					if (countdown2 == 0)
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <fsm_automatic_run+0x374>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d113      	bne.n	8000eba <fsm_automatic_run+0x36a>
					{
						status2 = AUTO_RED;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <fsm_automatic_run+0x378>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	601a      	str	r2, [r3, #0]
						countdown2 = timer_red/1000;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <fsm_automatic_run+0x37c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <fsm_automatic_run+0x380>)
 8000e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea2:	1192      	asrs	r2, r2, #6
 8000ea4:	17db      	asrs	r3, r3, #31
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <fsm_automatic_run+0x374>)
 8000eaa:	6013      	str	r3, [r2, #0]
					}
				}
				break;
 8000eac:	e005      	b.n	8000eba <fsm_automatic_run+0x36a>
			default:
				break;
 8000eae:	bf00      	nop
 8000eb0:	e004      	b.n	8000ebc <fsm_automatic_run+0x36c>
				break;
 8000eb2:	bf00      	nop
 8000eb4:	e002      	b.n	8000ebc <fsm_automatic_run+0x36c>
				break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <fsm_automatic_run+0x36c>
				break;
 8000eba:	bf00      	nop
		}
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	200000a8 	.word	0x200000a8
 8000ec8:	20000054 	.word	0x20000054
 8000ecc:	2000005c 	.word	0x2000005c
 8000ed0:	10624dd3 	.word	0x10624dd3

08000ed4 <fsm_manual_run>:
 *      Author: LENOVO
 */
#include "fsm_mannual.h"

void fsm_manual_run()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	switch(mode)
 8000ed8:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <fsm_manual_run+0x280>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	f200 812a 	bhi.w	8001138 <fsm_manual_run+0x264>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <fsm_manual_run+0x18>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000efd 	.word	0x08000efd
 8000ef0:	08000f3d 	.word	0x08000f3d
 8000ef4:	08000fe7 	.word	0x08000fe7
 8000ef8:	0800108f 	.word	0x0800108f
	{
	  case 1:  //autorun
		  fsm_automatic_run();
 8000efc:	f7ff fe28 	bl	8000b50 <fsm_automatic_run>
		  display_7SEG_automatic();
 8000f00:	f7ff fd34 	bl	800096c <display_7SEG_automatic>
		  if(isButtonPressed(0) == 1) // Button 1 pressed
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff f921 	bl	800014c <isButtonPressed>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	f040 8117 	bne.w	8001140 <fsm_manual_run+0x26c>
		  {
			setTimer(4, 50);
 8000f12:	2132      	movs	r1, #50	; 0x32
 8000f14:	2004      	movs	r0, #4
 8000f16:	f000 fa6b 	bl	80013f0 <setTimer>
			mode = 2;
 8000f1a:	4b8e      	ldr	r3, [pc, #568]	; (8001154 <fsm_manual_run+0x280>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	601a      	str	r2, [r3, #0]
			count = 1;
 8000f20:	4b8d      	ldr	r3, [pc, #564]	; (8001158 <fsm_manual_run+0x284>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |
 8000f26:	2201      	movs	r2, #1
 8000f28:	f640 611c 	movw	r1, #3612	; 0xe1c
 8000f2c:	488b      	ldr	r0, [pc, #556]	; (800115c <fsm_manual_run+0x288>)
 8000f2e:	f000 fe70 	bl	8001c12 <HAL_GPIO_WritePin>
					GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, SET);
			setTimer(3, 50);
 8000f32:	2132      	movs	r1, #50	; 0x32
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 fa5b 	bl	80013f0 <setTimer>
		  }
		  break;
 8000f3a:	e101      	b.n	8001140 <fsm_manual_run+0x26c>
	  case 2:  //red light
		  if(isTimeExpired(4) == 1)
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	f000 fa6f 	bl	8001420 <isTimeExpired>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10c      	bne.n	8000f62 <fsm_manual_run+0x8e>
		  {
			  setTimer(4, 50);
 8000f48:	2132      	movs	r1, #50	; 0x32
 8000f4a:	2004      	movs	r0, #4
 8000f4c:	f000 fa50 	bl	80013f0 <setTimer>
			  HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000f50:	2104      	movs	r1, #4
 8000f52:	4882      	ldr	r0, [pc, #520]	; (800115c <fsm_manual_run+0x288>)
 8000f54:	f000 fe75 	bl	8001c42 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5c:	487f      	ldr	r0, [pc, #508]	; (800115c <fsm_manual_run+0x288>)
 8000f5e:	f000 fe70 	bl	8001c42 <HAL_GPIO_TogglePin>
		  }
		  if(isButtonPressed(1) == 1) // Button 2 pressed
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff f8f2 	bl	800014c <isButtonPressed>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10b      	bne.n	8000f86 <fsm_manual_run+0xb2>
		  {
			  count++;
 8000f6e:	4b7a      	ldr	r3, [pc, #488]	; (8001158 <fsm_manual_run+0x284>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a78      	ldr	r2, [pc, #480]	; (8001158 <fsm_manual_run+0x284>)
 8000f76:	6013      	str	r3, [r2, #0]
			  if (count > 99) count = 0;
 8000f78:	4b77      	ldr	r3, [pc, #476]	; (8001158 <fsm_manual_run+0x284>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b63      	cmp	r3, #99	; 0x63
 8000f7e:	dd02      	ble.n	8000f86 <fsm_manual_run+0xb2>
 8000f80:	4b75      	ldr	r3, [pc, #468]	; (8001158 <fsm_manual_run+0x284>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
		  }
		  if(isButtonPressed(2) == 1) // Button 3 pressed
 8000f86:	2002      	movs	r0, #2
 8000f88:	f7ff f8e0 	bl	800014c <isButtonPressed>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10a      	bne.n	8000fa8 <fsm_manual_run+0xd4>
		  {
			  timer_red = count * 1000;
 8000f92:	4b71      	ldr	r3, [pc, #452]	; (8001158 <fsm_manual_run+0x284>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	4a70      	ldr	r2, [pc, #448]	; (8001160 <fsm_manual_run+0x28c>)
 8000fa0:	6013      	str	r3, [r2, #0]
			  count = 1;
 8000fa2:	4b6d      	ldr	r3, [pc, #436]	; (8001158 <fsm_manual_run+0x284>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
		  }
		  display_7SEG_manual();
 8000fa8:	f7ff fd62 	bl	8000a70 <display_7SEG_manual>
		  if(isButtonPressed(0) == 1) // Button 1 pressed
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff f8cd 	bl	800014c <isButtonPressed>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	f040 80c5 	bne.w	8001144 <fsm_manual_run+0x270>
		  {
			  setTimer(4, 50);
 8000fba:	2132      	movs	r1, #50	; 0x32
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	f000 fa17 	bl	80013f0 <setTimer>
			  mode = 3;
 8000fc2:	4b64      	ldr	r3, [pc, #400]	; (8001154 <fsm_manual_run+0x280>)
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	601a      	str	r2, [r3, #0]
			  count = 1;
 8000fc8:	4b63      	ldr	r3, [pc, #396]	; (8001158 <fsm_manual_run+0x284>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4862      	ldr	r0, [pc, #392]	; (800115c <fsm_manual_run+0x288>)
 8000fd4:	f000 fe1d 	bl	8001c12 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fde:	485f      	ldr	r0, [pc, #380]	; (800115c <fsm_manual_run+0x288>)
 8000fe0:	f000 fe17 	bl	8001c12 <HAL_GPIO_WritePin>
		  }
		  break;
 8000fe4:	e0ae      	b.n	8001144 <fsm_manual_run+0x270>
	  case 3:  // yellow light
		 if(isTimeExpired(4) == 1)
 8000fe6:	2004      	movs	r0, #4
 8000fe8:	f000 fa1a 	bl	8001420 <isTimeExpired>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10c      	bne.n	800100c <fsm_manual_run+0x138>
		 {
			 setTimer(4, 50);
 8000ff2:	2132      	movs	r1, #50	; 0x32
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f000 f9fb 	bl	80013f0 <setTimer>
			 HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	4857      	ldr	r0, [pc, #348]	; (800115c <fsm_manual_run+0x288>)
 8000ffe:	f000 fe20 	bl	8001c42 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4855      	ldr	r0, [pc, #340]	; (800115c <fsm_manual_run+0x288>)
 8001008:	f000 fe1b 	bl	8001c42 <HAL_GPIO_TogglePin>
		 }
		 if(isButtonPressed(1) == 1)
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff f89d 	bl	800014c <isButtonPressed>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d10b      	bne.n	8001030 <fsm_manual_run+0x15c>
		 {
			 count++;
 8001018:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <fsm_manual_run+0x284>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <fsm_manual_run+0x284>)
 8001020:	6013      	str	r3, [r2, #0]
			 if (count > 99) { count = 0; }
 8001022:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <fsm_manual_run+0x284>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b63      	cmp	r3, #99	; 0x63
 8001028:	dd02      	ble.n	8001030 <fsm_manual_run+0x15c>
 800102a:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <fsm_manual_run+0x284>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
		 }
		 if(isButtonPressed(2) == 1)
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff f88b 	bl	800014c <isButtonPressed>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d10a      	bne.n	8001052 <fsm_manual_run+0x17e>
		 {
			 timer_yellow = count*1000;
 800103c:	4b46      	ldr	r3, [pc, #280]	; (8001158 <fsm_manual_run+0x284>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <fsm_manual_run+0x290>)
 800104a:	6013      	str	r3, [r2, #0]
			 count = 1;
 800104c:	4b42      	ldr	r3, [pc, #264]	; (8001158 <fsm_manual_run+0x284>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
		 }
		 display_7SEG_manual();
 8001052:	f7ff fd0d 	bl	8000a70 <display_7SEG_manual>
		 if(isButtonPressed(0) == 1) // Button 1 pressed
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff f878 	bl	800014c <isButtonPressed>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d172      	bne.n	8001148 <fsm_manual_run+0x274>
		 {
			 setTimer(4, 50);
 8001062:	2132      	movs	r1, #50	; 0x32
 8001064:	2004      	movs	r0, #4
 8001066:	f000 f9c3 	bl	80013f0 <setTimer>
			 mode = 4;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <fsm_manual_run+0x280>)
 800106c:	2204      	movs	r2, #4
 800106e:	601a      	str	r2, [r3, #0]
			 count = 1;
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <fsm_manual_run+0x284>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2108      	movs	r1, #8
 800107a:	4838      	ldr	r0, [pc, #224]	; (800115c <fsm_manual_run+0x288>)
 800107c:	f000 fdc9 	bl	8001c12 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001086:	4835      	ldr	r0, [pc, #212]	; (800115c <fsm_manual_run+0x288>)
 8001088:	f000 fdc3 	bl	8001c12 <HAL_GPIO_WritePin>
		 }
		 break;
 800108c:	e05c      	b.n	8001148 <fsm_manual_run+0x274>
	  case 4:  //green light
		  if(isTimeExpired(4) == 1)
 800108e:	2004      	movs	r0, #4
 8001090:	f000 f9c6 	bl	8001420 <isTimeExpired>
 8001094:	4603      	mov	r3, r0
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10c      	bne.n	80010b4 <fsm_manual_run+0x1e0>
		  {
			  setTimer(4, 50);
 800109a:	2132      	movs	r1, #50	; 0x32
 800109c:	2004      	movs	r0, #4
 800109e:	f000 f9a7 	bl	80013f0 <setTimer>
			  HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 80010a2:	2110      	movs	r1, #16
 80010a4:	482d      	ldr	r0, [pc, #180]	; (800115c <fsm_manual_run+0x288>)
 80010a6:	f000 fdcc 	bl	8001c42 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80010aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ae:	482b      	ldr	r0, [pc, #172]	; (800115c <fsm_manual_run+0x288>)
 80010b0:	f000 fdc7 	bl	8001c42 <HAL_GPIO_TogglePin>
		  }
		  if(isButtonPressed(1) == 1)
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff f849 	bl	800014c <isButtonPressed>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <fsm_manual_run+0x204>
		  {
			  count++;
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <fsm_manual_run+0x284>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <fsm_manual_run+0x284>)
 80010c8:	6013      	str	r3, [r2, #0]
			  if (count > 99) { count = 0; }
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <fsm_manual_run+0x284>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b63      	cmp	r3, #99	; 0x63
 80010d0:	dd02      	ble.n	80010d8 <fsm_manual_run+0x204>
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <fsm_manual_run+0x284>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
		  }
		  if(isButtonPressed(2) == 1)
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff f837 	bl	800014c <isButtonPressed>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10a      	bne.n	80010fa <fsm_manual_run+0x226>
		  {
			  timer_green = count*1000;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <fsm_manual_run+0x284>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <fsm_manual_run+0x294>)
 80010f2:	6013      	str	r3, [r2, #0]
			  count = 1;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <fsm_manual_run+0x284>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
		  }
		  display_7SEG_manual();
 80010fa:	f7ff fcb9 	bl	8000a70 <display_7SEG_manual>
		  if(isButtonPressed(0) == 1) // Button 1 pressed
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff f824 	bl	800014c <isButtonPressed>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d120      	bne.n	800114c <fsm_manual_run+0x278>
		  {
			  mode = 1;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <fsm_manual_run+0x280>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
			  count = 1;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <fsm_manual_run+0x284>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
			  status1 = INIT;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <fsm_manual_run+0x298>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
			  status2 = INIT;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <fsm_manual_run+0x29c>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2110      	movs	r1, #16
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <fsm_manual_run+0x288>)
 8001128:	f000 fd73 	bl	8001c12 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2110      	movs	r1, #16
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <fsm_manual_run+0x288>)
 8001132:	f000 fd6e 	bl	8001c12 <HAL_GPIO_WritePin>
		  }
		  break;
 8001136:	e009      	b.n	800114c <fsm_manual_run+0x278>
	  default:
		  mode = 1;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <fsm_manual_run+0x280>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]
		  break;
 800113e:	e006      	b.n	800114e <fsm_manual_run+0x27a>
		  break;
 8001140:	bf00      	nop
 8001142:	e004      	b.n	800114e <fsm_manual_run+0x27a>
		  break;
 8001144:	bf00      	nop
 8001146:	e002      	b.n	800114e <fsm_manual_run+0x27a>
		 break;
 8001148:	bf00      	nop
 800114a:	e000      	b.n	800114e <fsm_manual_run+0x27a>
		  break;
 800114c:	bf00      	nop
	}
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000058 	.word	0x20000058
 8001158:	200000a0 	.word	0x200000a0
 800115c:	40010800 	.word	0x40010800
 8001160:	2000005c 	.word	0x2000005c
 8001164:	20000060 	.word	0x20000060
 8001168:	20000064 	.word	0x20000064
 800116c:	20000050 	.word	0x20000050
 8001170:	20000054 	.word	0x20000054

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f000 fa4a 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f83a 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001180:	f000 f8c0 	bl	8001304 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001184:	f000 f872 	bl	800126c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001188:	4816      	ldr	r0, [pc, #88]	; (80011e4 <main+0x70>)
 800118a:	f001 f99f 	bl	80024cc <HAL_TIM_Base_Start_IT>
  status1 = INIT;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <main+0x74>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <main+0x78>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
  setTimer(0, 100); // Blink PA5 LED
 800119a:	2164      	movs	r1, #100	; 0x64
 800119c:	2000      	movs	r0, #0
 800119e:	f000 f927 	bl	80013f0 <setTimer>
  setTimer(3, 50);
 80011a2:	2132      	movs	r1, #50	; 0x32
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f923 	bl	80013f0 <setTimer>
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b0:	480f      	ldr	r0, [pc, #60]	; (80011f0 <main+0x7c>)
 80011b2:	f000 fd2e 	bl	8001c12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <main+0x7c>)
 80011be:	f000 fd28 	bl	8001c12 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isTimeExpired(0) == 1)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f92c 	bl	8001420 <isTimeExpired>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <main+0x6a>
	  {
		  setTimer(0, 100);
 80011ce:	2164      	movs	r1, #100	; 0x64
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 f90d 	bl	80013f0 <setTimer>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011d6:	2120      	movs	r1, #32
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <main+0x7c>)
 80011da:	f000 fd32 	bl	8001c42 <HAL_GPIO_TogglePin>
	  }
//	  fsm_automatic_run();
	  fsm_manual_run();
 80011de:	f7ff fe79 	bl	8000ed4 <fsm_manual_run>
	  if (isTimeExpired(0) == 1)
 80011e2:	e7ee      	b.n	80011c2 <main+0x4e>
 80011e4:	200000ac 	.word	0x200000ac
 80011e8:	20000050 	.word	0x20000050
 80011ec:	20000054 	.word	0x20000054
 80011f0:	40010800 	.word	0x40010800

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b090      	sub	sp, #64	; 0x40
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2228      	movs	r2, #40	; 0x28
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fd12 	bl	8002c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2310      	movs	r3, #16
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fd22 	bl	8001c74 <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001236:	f000 f8d5 	bl	80013e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f000 ff8e 	bl	8002174 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800125e:	f000 f8c1 	bl	80013e4 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3740      	adds	r7, #64	; 0x40
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM2_Init+0x94>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM2_Init+0x94>)
 8001292:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001296:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM2_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM2_Init+0x94>)
 80012a0:	2209      	movs	r2, #9
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM2_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM2_Init+0x94>)
 80012b2:	f001 f8bb 	bl	800242c <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012bc:	f000 f892 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ce:	f001 fa39 	bl	8002744 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 f884 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ea:	f001 fc11 	bl	8002b10 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 f876 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200000ac 	.word	0x200000ac

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_GPIO_Init+0xbc>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <MX_GPIO_Init+0xbc>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_GPIO_Init+0xbc>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <MX_GPIO_Init+0xbc>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <MX_GPIO_Init+0xbc>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_GPIO_Init+0xbc>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001348:	2200      	movs	r2, #0
 800134a:	f643 613c 	movw	r1, #15932	; 0x3e3c
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <MX_GPIO_Init+0xc0>)
 8001350:	f000 fc5f 	bl	8001c12 <HAL_GPIO_WritePin>
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
                          |EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_1_Pin|b_1_Pin|c_1_Pin|d_2_Pin
 8001354:	2200      	movs	r2, #0
 8001356:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800135a:	481b      	ldr	r0, [pc, #108]	; (80013c8 <MX_GPIO_Init+0xc4>)
 800135c:	f000 fc59 	bl	8001c12 <HAL_GPIO_WritePin>
                          |b_2_Pin|c_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED_Pin
                           LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin EN0_Pin
                           EN1_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001360:	f643 633c 	movw	r3, #15932	; 0x3e3c
 8001364:	60bb      	str	r3, [r7, #8]
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
                          |EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2302      	movs	r3, #2
 8001370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4619      	mov	r1, r3
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <MX_GPIO_Init+0xc0>)
 800137a:	f000 fab9 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800137e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_GPIO_Init+0xc0>)
 8001394:	f000 faac 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_1_Pin b_1_Pin c_1_Pin d_2_Pin
                           e_2_Pin f_2_Pin g_2_Pin d_1_Pin
                           e_1_Pin f_1_Pin g_1_Pin a_2_Pin
                           b_2_Pin c_2_Pin */
  GPIO_InitStruct.Pin = a_1_Pin|b_1_Pin|c_1_Pin|d_2_Pin
 8001398:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800139c:	60bb      	str	r3, [r7, #8]
                          |e_2_Pin|f_2_Pin|g_2_Pin|d_1_Pin
                          |e_1_Pin|f_1_Pin|g_1_Pin|a_2_Pin
                          |b_2_Pin|c_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2302      	movs	r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_GPIO_Init+0xc4>)
 80013b2:	f000 fa9d 	bl	80018f0 <HAL_GPIO_Init>

}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00

080013cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	timerRun();
 80013d4:	f000 f838 	bl	8001448 <timerRun>
	readButton();
 80013d8:	f7fe fed2 	bl	8000180 <readButton>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <setTimer>:

int timer_counter[MAX_TIMER];
int timer_flag[MAX_TIMER];

void setTimer(int index, int duration)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 80013fa:	4907      	ldr	r1, [pc, #28]	; (8001418 <setTimer+0x28>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <setTimer+0x2c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2100      	movs	r1, #0
 800140a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	200000f4 	.word	0x200000f4
 800141c:	20000144 	.word	0x20000144

08001420 <isTimeExpired>:

int isTimeExpired(int index)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) return 1;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <isTimeExpired+0x24>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <isTimeExpired+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <isTimeExpired+0x1a>
	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000144 	.word	0x20000144

08001448 <timerRun>:

void timerRun()
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_TIMER; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e01c      	b.n	800148e <timerRun+0x46>
	{
		if (timer_counter[i] > 0)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <timerRun+0x58>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dd13      	ble.n	8001488 <timerRun+0x40>
		{
			timer_counter[i]--;
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <timerRun+0x58>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	490d      	ldr	r1, [pc, #52]	; (80014a0 <timerRun+0x58>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) timer_flag[i] = 1;
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <timerRun+0x58>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	2b00      	cmp	r3, #0
 800147c:	dc04      	bgt.n	8001488 <timerRun+0x40>
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <timerRun+0x5c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2101      	movs	r1, #1
 8001484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_TIMER; i++)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3301      	adds	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b13      	cmp	r3, #19
 8001492:	dddf      	ble.n	8001454 <timerRun+0xc>
		}
	}
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	200000f4 	.word	0x200000f4
 80014a4:	20000144 	.word	0x20000144

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_MspInit+0x5c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_MspInit+0x5c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_MspInit+0x5c>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_MspInit+0x5c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_MspInit+0x5c>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_MspInit+0x5c>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_MspInit+0x60>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_MspInit+0x60>)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151c:	d113      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_TIM_Base_MspInit+0x44>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_TIM_Base_MspInit+0x44>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_TIM_Base_MspInit+0x44>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	201c      	movs	r0, #28
 800153c:	f000 f9a1 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001540:	201c      	movs	r0, #28
 8001542:	f000 f9ba 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159a:	f000 f87f 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f000 ffdb 	bl	8002564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000ac 	.word	0x200000ac

080015b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c4:	f7ff fff8 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ca:	490c      	ldr	r1, [pc, #48]	; (80015fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015e0:	4c09      	ldr	r4, [pc, #36]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f001 faf9 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f2:	f7ff fdbf 	bl	8001174 <main>
  bx lr
 80015f6:	4770      	bx	lr
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001600:	08002c80 	.word	0x08002c80
  ldr r2, =_sbss
 8001604:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001608:	20000198 	.word	0x20000198

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x28>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f923 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff ff3c 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f93b 	bl	80018d6 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f903 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000068 	.word	0x20000068
 8001694:	20000070 	.word	0x20000070
 8001698:	2000006c 	.word	0x2000006c

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000070 	.word	0x20000070
 80016bc:	20000194 	.word	0x20000194

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	20000194 	.word	0x20000194

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b08b      	sub	sp, #44	; 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e148      	b.n	8001b96 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001904:	2201      	movs	r2, #1
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8137 	bne.w	8001b90 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4aa3      	ldr	r2, [pc, #652]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800192c:	4aa1      	ldr	r2, [pc, #644]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d875      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001932:	4aa1      	ldr	r2, [pc, #644]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d058      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001938:	4a9f      	ldr	r2, [pc, #636]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d86f      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800193e:	4a9f      	ldr	r2, [pc, #636]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d052      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001944:	4a9d      	ldr	r2, [pc, #628]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d869      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800194a:	4a9d      	ldr	r2, [pc, #628]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d04c      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001950:	4a9b      	ldr	r2, [pc, #620]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d863      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001956:	4a9b      	ldr	r2, [pc, #620]	; (8001bc4 <HAL_GPIO_Init+0x2d4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d046      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800195c:	4a99      	ldr	r2, [pc, #612]	; (8001bc4 <HAL_GPIO_Init+0x2d4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d85d      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d82a      	bhi.n	80019bc <HAL_GPIO_Init+0xcc>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d859      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_GPIO_Init+0x80>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019d7 	.word	0x080019d7
 800197c:	08001a19 	.word	0x08001a19
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	4a82      	ldr	r2, [pc, #520]	; (8001bc8 <HAL_GPIO_Init+0x2d8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c2:	e02c      	b.n	8001a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e029      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e024      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	3308      	adds	r3, #8
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	330c      	adds	r3, #12
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e01a      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f2:	2304      	movs	r3, #4
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e013      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	611a      	str	r2, [r3, #16]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	615a      	str	r2, [r3, #20]
          break;
 8001a16:	e003      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          break;
 8001a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d801      	bhi.n	8001a2a <HAL_GPIO_Init+0x13a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_Init+0x13e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d802      	bhi.n	8001a3c <HAL_GPIO_Init+0x14c>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x152>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3b08      	subs	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	210f      	movs	r1, #15
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8090 	beq.w	8001b90 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a70:	4b56      	ldr	r3, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a55      	ldr	r2, [pc, #340]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a49      	ldr	r2, [pc, #292]	; (8001bd4 <HAL_GPIO_Init+0x2e4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <HAL_GPIO_Init+0x1dc>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2ec>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_GPIO_Init+0x1d8>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e004      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	f002 0203 	and.w	r2, r2, #3
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	4093      	lsls	r3, r2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae2:	493b      	ldr	r1, [pc, #236]	; (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4937      	ldr	r1, [pc, #220]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4933      	ldr	r1, [pc, #204]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	492d      	ldr	r1, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60cb      	str	r3, [r1, #12]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4929      	ldr	r1, [pc, #164]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4923      	ldr	r1, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	491f      	ldr	r1, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4919      	ldr	r1, [pc, #100]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4915      	ldr	r1, [pc, #84]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	3301      	adds	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f aeaf 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	372c      	adds	r7, #44	; 0x2c
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	10320000 	.word	0x10320000
 8001bb8:	10310000 	.word	0x10310000
 8001bbc:	10220000 	.word	0x10220000
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	10120000 	.word	0x10120000
 8001bc8:	10110000 	.word	0x10110000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	40010c00 	.word	0x40010c00
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e001      	b.n	8001c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	807b      	strh	r3, [r7, #2]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c22:	787b      	ldrb	r3, [r7, #1]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	611a      	str	r2, [r3, #16]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	041a      	lsls	r2, r3, #16
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	400b      	ands	r3, r1
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e26c      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8087 	beq.w	8001da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d00c      	beq.n	8001cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d112      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
 8001cac:	4b8c      	ldr	r3, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x12c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d168      	bne.n	8001da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e246      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x76>
 8001cdc:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a7f      	ldr	r2, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x98>
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xbc>
 8001d16:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a71      	ldr	r2, [pc, #452]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d30:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6a      	ldr	r2, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fcb6 	bl	80016c0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fcb2 	bl	80016c0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1fa      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe4>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fca2 	bl	80016c0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fc9e 	bl	80016c0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1e6      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x10c>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1ba      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fc57 	bl	80016c0 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fc53 	bl	80016c0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e19b      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4927      	ldr	r1, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fc36 	bl	80016c0 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fc32 	bl	80016c0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e17a      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d019      	beq.n	8001ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fc16 	bl	80016c0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc12 	bl	80016c0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e15a      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f000 fa9a 	bl	80023f0 <RCC_Delay>
 8001ebc:	e01c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fbfc 	bl	80016c0 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fbf8 	bl	80016c0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e140      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	42420000 	.word	0x42420000
 8001ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b9e      	ldr	r3, [pc, #632]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e9      	bne.n	8001ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a6 	beq.w	8002052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b97      	ldr	r3, [pc, #604]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b94      	ldr	r3, [pc, #592]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a93      	ldr	r2, [pc, #588]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b91      	ldr	r3, [pc, #580]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b8e      	ldr	r3, [pc, #568]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a8a      	ldr	r2, [pc, #552]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fbb9 	bl	80016c0 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff fbb5 	bl	80016c0 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0fd      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x312>
 8001f78:	4b7b      	ldr	r3, [pc, #492]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a7a      	ldr	r2, [pc, #488]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x334>
 8001f8e:	4b76      	ldr	r3, [pc, #472]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a75      	ldr	r2, [pc, #468]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b73      	ldr	r3, [pc, #460]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a72      	ldr	r2, [pc, #456]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	e01c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x356>
 8001fb0:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a6c      	ldr	r2, [pc, #432]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a69      	ldr	r2, [pc, #420]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a66      	ldr	r2, [pc, #408]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb69 	bl	80016c0 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fb65 	bl	80016c0 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0ab      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ee      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x37e>
 8002014:	e014      	b.n	8002040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb53 	bl	80016c0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fb4f 	bl	80016c0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e095      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4b4c      	ldr	r3, [pc, #304]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b48      	ldr	r3, [pc, #288]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8081 	beq.w	800215e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d061      	beq.n	800212c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d146      	bne.n	80020fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fb23 	bl	80016c0 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff fb1f 	bl	80016c0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e067      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	492d      	ldr	r1, [pc, #180]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a19      	ldr	r1, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	430b      	orrs	r3, r1
 80020ca:	4927      	ldr	r1, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff faf3 	bl	80016c0 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff faef 	bl	80016c0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e037      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x46a>
 80020fc:	e02f      	b.n	800215e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fadc 	bl	80016c0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fad8 	bl	80016c0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e020      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x498>
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
 8002170:	42420060 	.word	0x42420060

08002174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d0      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4965      	ldr	r1, [pc, #404]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b8      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d0:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a58      	ldr	r2, [pc, #352]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e8:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a52      	ldr	r2, [pc, #328]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	494d      	ldr	r1, [pc, #308]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d040      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d115      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07f      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e073      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06b      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4936      	ldr	r1, [pc, #216]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fa2c 	bl	80016c0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fa28 	bl	80016c0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e053      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d210      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4922      	ldr	r1, [pc, #136]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e032      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4916      	ldr	r1, [pc, #88]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002302:	f000 f821 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002306:	4602      	mov	r2, r0
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	490a      	ldr	r1, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f98a 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	08002c54 	.word	0x08002c54
 8002340:	20000068 	.word	0x20000068
 8002344:	2000006c 	.word	0x2000006c

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
 8002372:	2b08      	cmp	r3, #8
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
 8002376:	e027      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e027      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0c5b      	lsrs	r3, r3, #17
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	fb02 f203 	mul.w	r2, r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e004      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	613b      	str	r3, [r7, #16]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ca:	613b      	str	r3, [r7, #16]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	693b      	ldr	r3, [r7, #16]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	08002c64 	.word	0x08002c64
 80023e8:	08002c74 	.word	0x08002c74
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <RCC_Delay+0x34>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <RCC_Delay+0x38>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0a5b      	lsrs	r3, r3, #9
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800240c:	bf00      	nop
  }
  while (Delay --);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	60fa      	str	r2, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <RCC_Delay+0x1c>
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000068 	.word	0x20000068
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e041      	b.n	80024c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff f85a 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 fa56 	bl	800291c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e035      	b.n	8002550 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_TIM_Base_Start_IT+0x90>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_TIM_Base_Start_IT+0x4e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250e:	d004      	beq.n	800251a <HAL_TIM_Base_Start_IT+0x4e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <HAL_TIM_Base_Start_IT+0x94>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d111      	bne.n	800253e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d010      	beq.n	800254e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253c:	e007      	b.n	800254e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40000400 	.word	0x40000400

08002564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0202 	mvn.w	r2, #2
 8002598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f998 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f98b 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f99a 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0204 	mvn.w	r2, #4
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f972 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f965 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f974 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0208 	mvn.w	r2, #8
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f94c 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f93f 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f94e 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0210 	mvn.w	r2, #16
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2208      	movs	r2, #8
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f926 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f919 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f928 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0201 	mvn.w	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fe7e 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa6f 	bl	8002bd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8f8 	bl	8002908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0220 	mvn.w	r2, #32
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa42 	bl	8002bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIM_ConfigClockSource+0x1c>
 800275c:	2302      	movs	r3, #2
 800275e:	e0b4      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x186>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d03e      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0xd4>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	f200 8087 	bhi.w	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a6:	f000 8086 	beq.w	80028b6 <HAL_TIM_ConfigClockSource+0x172>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d87f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d01a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xa6>
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d87b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d050      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x11a>
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d877      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d03c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xfa>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d873      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d058      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x13a>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d86f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d064      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d86b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d060      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d867      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d05a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027e8:	e062      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f000 f96a 	bl	8002ad2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800280c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	609a      	str	r2, [r3, #8]
      break;
 8002816:	e04f      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f000 f953 	bl	8002ad2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	609a      	str	r2, [r3, #8]
      break;
 800283c:	e03c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 f8ca 	bl	80029e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2150      	movs	r1, #80	; 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f921 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 800285c:	e02c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 f8e8 	bl	8002a40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2160      	movs	r1, #96	; 0x60
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f911 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 800287c:	e01c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 f8aa 	bl	80029e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f901 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 800289c:	e00c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 f8f8 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 80028ae:	e003      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	e000      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
	...

0800291c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <TIM_Base_SetConfig+0xc0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <TIM_Base_SetConfig+0x28>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d003      	beq.n	8002944 <TIM_Base_SetConfig+0x28>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a28      	ldr	r2, [pc, #160]	; (80029e0 <TIM_Base_SetConfig+0xc4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a20      	ldr	r2, [pc, #128]	; (80029dc <TIM_Base_SetConfig+0xc0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x52>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x52>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <TIM_Base_SetConfig+0xc4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <TIM_Base_SetConfig+0xc0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]
  }
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40000400 	.word	0x40000400

080029e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f023 030a 	bic.w	r3, r3, #10
 8002a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	621a      	str	r2, [r3, #32]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f023 0210 	bic.w	r2, r3, #16
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	031b      	lsls	r3, r3, #12
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	621a      	str	r2, [r3, #32]
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f043 0307 	orr.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	609a      	str	r2, [r3, #8]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e041      	b.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d004      	beq.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10c      	bne.n	8002b9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400

08002bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	2600      	movs	r6, #0
 8002be8:	4d0c      	ldr	r5, [pc, #48]	; (8002c1c <__libc_init_array+0x38>)
 8002bea:	4c0d      	ldr	r4, [pc, #52]	; (8002c20 <__libc_init_array+0x3c>)
 8002bec:	1b64      	subs	r4, r4, r5
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	42a6      	cmp	r6, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	f000 f822 	bl	8002c3c <_init>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4d0a      	ldr	r5, [pc, #40]	; (8002c24 <__libc_init_array+0x40>)
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	; (8002c28 <__libc_init_array+0x44>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	42a6      	cmp	r6, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0c:	4798      	blx	r3
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c16:	4798      	blx	r3
 8002c18:	3601      	adds	r6, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08002c78 	.word	0x08002c78
 8002c20:	08002c78 	.word	0x08002c78
 8002c24:	08002c78 	.word	0x08002c78
 8002c28:	08002c7c 	.word	0x08002c7c

08002c2c <memset>:
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4402      	add	r2, r0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d100      	bne.n	8002c36 <memset+0xa>
 8002c34:	4770      	bx	lr
 8002c36:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3a:	e7f9      	b.n	8002c30 <memset+0x4>

08002c3c <_init>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr

08002c48 <_fini>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr
